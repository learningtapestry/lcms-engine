module ResqueJob
  def self.included: (untyped base) -> untyped

  module ClassMethods
    def find: (untyped job_id) -> untyped

    def find_in_queue: (untyped job_id) -> untyped

    def find_in_queue_by_payload: (untyped job_class) ?{ () -> untyped } -> untyped

    def find_in_working: (untyped job_id) -> untyped

    def find_in_working_by_payload: (untyped job_class) ?{ () -> untyped } -> untyped

    def fetch_result: (untyped job_id) -> untyped

    def result_key: (untyped job_id) -> untyped

    def status: (untyped job_id) -> (:waiting | :running | :done)
  end

  def result_key: () -> untyped

  def store_initial_result: (untyped res, ?::Hash[untyped, untyped] options) -> untyped

  #
  # @param [Hash] res
  # @param [Hash] options
  #
  def store_result: (untyped res, ?::Hash[untyped, untyped] options) -> untyped
end
