module Lcms
  module Engine
    module Integrations
      class WebhookConfiguration < ::Lcms::Engine::ApplicationRecord
        extend _ActiveRecord_Relation_ClassMethods[Lcms::Engine::Integrations::WebhookConfiguration, ActiveRecord_Relation, Integer]

        module GeneratedAttributeMethods
          def id: () -> Integer

          def id=: (Integer) -> Integer

          def id?: () -> bool

          def id_changed?: () -> bool

          def id_change: () -> [ Integer?, Integer? ]

          def id_will_change!: () -> void

          def id_was: () -> Integer?

          def id_previously_changed?: () -> bool

          def id_previous_change: () -> Array[Integer?]?

          def id_previously_was: () -> Integer?

          def id_before_last_save: () -> Integer?

          def id_change_to_be_saved: () -> Array[Integer?]?

          def id_in_database: () -> Integer?

          def saved_change_to_id: () -> Array[Integer?]?

          def saved_change_to_id?: () -> bool

          def will_save_change_to_id?: () -> bool

          def restore_id!: () -> void

          def clear_id_change: () -> void

          def event_name: () -> String

          def event_name=: (String) -> String

          def event_name?: () -> bool

          def event_name_changed?: () -> bool

          def event_name_change: () -> [ String?, String? ]

          def event_name_will_change!: () -> void

          def event_name_was: () -> String?

          def event_name_previously_changed?: () -> bool

          def event_name_previous_change: () -> Array[String?]?

          def event_name_previously_was: () -> String?

          def event_name_before_last_save: () -> String?

          def event_name_change_to_be_saved: () -> Array[String?]?

          def event_name_in_database: () -> String?

          def saved_change_to_event_name: () -> Array[String?]?

          def saved_change_to_event_name?: () -> bool

          def will_save_change_to_event_name?: () -> bool

          def restore_event_name!: () -> void

          def clear_event_name_change: () -> void

          def active: () -> bool?

          def active=: (bool?) -> bool?

          def active?: () -> bool

          def active_changed?: () -> bool

          def active_change: () -> [ bool?, bool? ]

          def active_will_change!: () -> void

          def active_was: () -> bool?

          def active_previously_changed?: () -> bool

          def active_previous_change: () -> Array[bool?]?

          def active_previously_was: () -> bool?

          def active_before_last_save: () -> bool?

          def active_change_to_be_saved: () -> Array[bool?]?

          def active_in_database: () -> bool?

          def saved_change_to_active: () -> Array[bool?]?

          def saved_change_to_active?: () -> bool

          def will_save_change_to_active?: () -> bool

          def restore_active!: () -> void

          def clear_active_change: () -> void

          def endpoint_url: () -> String

          def endpoint_url=: (String) -> String

          def endpoint_url?: () -> bool

          def endpoint_url_changed?: () -> bool

          def endpoint_url_change: () -> [ String?, String? ]

          def endpoint_url_will_change!: () -> void

          def endpoint_url_was: () -> String?

          def endpoint_url_previously_changed?: () -> bool

          def endpoint_url_previous_change: () -> Array[String?]?

          def endpoint_url_previously_was: () -> String?

          def endpoint_url_before_last_save: () -> String?

          def endpoint_url_change_to_be_saved: () -> Array[String?]?

          def endpoint_url_in_database: () -> String?

          def saved_change_to_endpoint_url: () -> Array[String?]?

          def saved_change_to_endpoint_url?: () -> bool

          def will_save_change_to_endpoint_url?: () -> bool

          def restore_endpoint_url!: () -> void

          def clear_endpoint_url_change: () -> void

          def action: () -> String

          def action=: (String) -> String

          def action?: () -> bool

          def action_changed?: () -> bool

          def action_change: () -> [ String?, String? ]

          def action_will_change!: () -> void

          def action_was: () -> String?

          def action_previously_changed?: () -> bool

          def action_previous_change: () -> Array[String?]?

          def action_previously_was: () -> String?

          def action_before_last_save: () -> String?

          def action_change_to_be_saved: () -> Array[String?]?

          def action_in_database: () -> String?

          def saved_change_to_action: () -> Array[String?]?

          def saved_change_to_action?: () -> bool

          def will_save_change_to_action?: () -> bool

          def restore_action!: () -> void

          def clear_action_change: () -> void

          def auth_type: () -> String?

          def auth_type=: (String?) -> String?

          def auth_type?: () -> bool

          def auth_type_changed?: () -> bool

          def auth_type_change: () -> [ String?, String? ]

          def auth_type_will_change!: () -> void

          def auth_type_was: () -> String?

          def auth_type_previously_changed?: () -> bool

          def auth_type_previous_change: () -> Array[String?]?

          def auth_type_previously_was: () -> String?

          def auth_type_before_last_save: () -> String?

          def auth_type_change_to_be_saved: () -> Array[String?]?

          def auth_type_in_database: () -> String?

          def saved_change_to_auth_type: () -> Array[String?]?

          def saved_change_to_auth_type?: () -> bool

          def will_save_change_to_auth_type?: () -> bool

          def restore_auth_type!: () -> void

          def clear_auth_type_change: () -> void

          def auth_credentials: () -> untyped?

          def auth_credentials=: (untyped?) -> untyped?

          def auth_credentials?: () -> bool

          def auth_credentials_changed?: () -> bool

          def auth_credentials_change: () -> [ untyped?, untyped? ]

          def auth_credentials_will_change!: () -> void

          def auth_credentials_was: () -> untyped?

          def auth_credentials_previously_changed?: () -> bool

          def auth_credentials_previous_change: () -> Array[untyped?]?

          def auth_credentials_previously_was: () -> untyped?

          def auth_credentials_before_last_save: () -> untyped?

          def auth_credentials_change_to_be_saved: () -> Array[untyped?]?

          def auth_credentials_in_database: () -> untyped?

          def saved_change_to_auth_credentials: () -> Array[untyped?]?

          def saved_change_to_auth_credentials?: () -> bool

          def will_save_change_to_auth_credentials?: () -> bool

          def restore_auth_credentials!: () -> void

          def clear_auth_credentials_change: () -> void

          def created_at: () -> ActiveSupport::TimeWithZone

          def created_at=: (ActiveSupport::TimeWithZone) -> ActiveSupport::TimeWithZone

          def created_at?: () -> bool

          def created_at_changed?: () -> bool

          def created_at_change: () -> [ ActiveSupport::TimeWithZone?, ActiveSupport::TimeWithZone? ]

          def created_at_will_change!: () -> void

          def created_at_was: () -> ActiveSupport::TimeWithZone?

          def created_at_previously_changed?: () -> bool

          def created_at_previous_change: () -> Array[ActiveSupport::TimeWithZone?]?

          def created_at_previously_was: () -> ActiveSupport::TimeWithZone?

          def created_at_before_last_save: () -> ActiveSupport::TimeWithZone?

          def created_at_change_to_be_saved: () -> Array[ActiveSupport::TimeWithZone?]?

          def created_at_in_database: () -> ActiveSupport::TimeWithZone?

          def saved_change_to_created_at: () -> Array[ActiveSupport::TimeWithZone?]?

          def saved_change_to_created_at?: () -> bool

          def will_save_change_to_created_at?: () -> bool

          def restore_created_at!: () -> void

          def clear_created_at_change: () -> void

          def updated_at: () -> ActiveSupport::TimeWithZone

          def updated_at=: (ActiveSupport::TimeWithZone) -> ActiveSupport::TimeWithZone

          def updated_at?: () -> bool

          def updated_at_changed?: () -> bool

          def updated_at_change: () -> [ ActiveSupport::TimeWithZone?, ActiveSupport::TimeWithZone? ]

          def updated_at_will_change!: () -> void

          def updated_at_was: () -> ActiveSupport::TimeWithZone?

          def updated_at_previously_changed?: () -> bool

          def updated_at_previous_change: () -> Array[ActiveSupport::TimeWithZone?]?

          def updated_at_previously_was: () -> ActiveSupport::TimeWithZone?

          def updated_at_before_last_save: () -> ActiveSupport::TimeWithZone?

          def updated_at_change_to_be_saved: () -> Array[ActiveSupport::TimeWithZone?]?

          def updated_at_in_database: () -> ActiveSupport::TimeWithZone?

          def saved_change_to_updated_at: () -> Array[ActiveSupport::TimeWithZone?]?

          def saved_change_to_updated_at?: () -> bool

          def will_save_change_to_updated_at?: () -> bool

          def restore_updated_at!: () -> void

          def clear_updated_at_change: () -> void
        end
        include GeneratedAttributeMethods

        module GeneratedRelationMethods
        end

        class ActiveRecord_Relation < ::ActiveRecord::Relation
          include GeneratedRelationMethods
          include _ActiveRecord_Relation[Lcms::Engine::Integrations::WebhookConfiguration, Integer]
          include Enumerable[Lcms::Engine::Integrations::WebhookConfiguration]
        end

        class ActiveRecord_Associations_CollectionProxy < ::ActiveRecord::Associations::CollectionProxy
          include GeneratedRelationMethods
          include _ActiveRecord_Relation[Lcms::Engine::Integrations::WebhookConfiguration, Integer]
        end

        CALL_TIMEOUT_SECONDS: Integer

        # Scope for active webhook configurations
        def self.active: () -> ActiveRecord::Relation

        # Class method to trigger webhook calls for active configurations with the specified event
        def self.trigger: (String event_name, Hash[Symbol, untyped] payload) -> void

        # Error class for webhook call failures
        class WebhookCallError < ::StandardError
        end

        # Executes a webhook call
        def execute_call: (Hash[Symbol, untyped] payload) -> Net::HTTPResponse

        # Private Methods
        private

        # Generates authorization headers based on the auth_type
        def auth_headers: (?Hash[Symbol, untyped] payload) -> Hash[String, String]

        # Generates an HMAC signature for the request
        def generate_hmac_signature: (untyped timestamp, untyped payload) -> untyped

        # Determines if the webhook call should be retried based on the status code
        def should_retry?: (Integer status_code) -> bool
      end
    end
  end
end
