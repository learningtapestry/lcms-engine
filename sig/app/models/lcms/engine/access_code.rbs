module Lcms
  module Engine
    class AccessCode < ::Lcms::Engine::ApplicationRecord
      extend _ActiveRecord_Relation_ClassMethods[Lcms::Engine::AccessCode, ActiveRecord_Relation, Integer]

      module Scopes
        def active: -> ActiveRecord_Relation
        def by_code: (String) -> ActiveRecord_Relation
      end
      extend Scopes

      module Associations

      end
      include Associations

      module GeneratedAttributeMethods
        def id: () -> Integer

        def id=: (Integer) -> Integer

        def id?: () -> bool

        def id_changed?: () -> bool

        def id_change: () -> [ Integer?, Integer? ]

        def id_will_change!: () -> void

        def id_was: () -> Integer?

        def id_previously_changed?: () -> bool

        def id_previous_change: () -> Array[Integer?]?

        def id_previously_was: () -> Integer?

        def id_before_last_save: () -> Integer?

        def id_change_to_be_saved: () -> Array[Integer?]?

        def id_in_database: () -> Integer?

        def saved_change_to_id: () -> Array[Integer?]?

        def saved_change_to_id?: () -> bool

        def will_save_change_to_id?: () -> bool

        def restore_id!: () -> void

        def clear_id_change: () -> void

        def code: () -> String

        def code=: (String) -> String

        def code?: () -> bool

        def code_changed?: () -> bool

        def code_change: () -> [ String?, String? ]

        def code_will_change!: () -> void

        def code_was: () -> String?

        def code_previously_changed?: () -> bool

        def code_previous_change: () -> Array[String?]?

        def code_previously_was: () -> String?

        def code_before_last_save: () -> String?

        def code_change_to_be_saved: () -> Array[String?]?

        def code_in_database: () -> String?

        def saved_change_to_code: () -> Array[String?]?

        def saved_change_to_code?: () -> bool

        def will_save_change_to_code?: () -> bool

        def restore_code!: () -> void

        def clear_code_change: () -> void

        def active: () -> bool

        def active=: (bool) -> bool

        def active?: () -> bool

        def active_changed?: () -> bool

        def active_change: () -> [ bool?, bool? ]

        def active_will_change!: () -> void

        def active_was: () -> bool?

        def active_previously_changed?: () -> bool

        def active_previous_change: () -> Array[bool?]?

        def active_previously_was: () -> bool?

        def active_before_last_save: () -> bool?

        def active_change_to_be_saved: () -> Array[bool?]?

        def active_in_database: () -> bool?

        def saved_change_to_active: () -> Array[bool?]?

        def saved_change_to_active?: () -> bool

        def will_save_change_to_active?: () -> bool

        def restore_active!: () -> void

        def clear_active_change: () -> void

        def created_at: () -> ActiveSupport::TimeWithZone

        def created_at=: (ActiveSupport::TimeWithZone) -> ActiveSupport::TimeWithZone

        def created_at?: () -> bool

        def created_at_changed?: () -> bool

        def created_at_change: () -> [ ActiveSupport::TimeWithZone?, ActiveSupport::TimeWithZone? ]

        def created_at_will_change!: () -> void

        def created_at_was: () -> ActiveSupport::TimeWithZone?

        def created_at_previously_changed?: () -> bool

        def created_at_previous_change: () -> Array[ActiveSupport::TimeWithZone?]?

        def created_at_previously_was: () -> ActiveSupport::TimeWithZone?

        def created_at_before_last_save: () -> ActiveSupport::TimeWithZone?

        def created_at_change_to_be_saved: () -> Array[ActiveSupport::TimeWithZone?]?

        def created_at_in_database: () -> ActiveSupport::TimeWithZone?

        def saved_change_to_created_at: () -> Array[ActiveSupport::TimeWithZone?]?

        def saved_change_to_created_at?: () -> bool

        def will_save_change_to_created_at?: () -> bool

        def restore_created_at!: () -> void

        def clear_created_at_change: () -> void

        def updated_at: () -> ActiveSupport::TimeWithZone

        def updated_at=: (ActiveSupport::TimeWithZone) -> ActiveSupport::TimeWithZone

        def updated_at?: () -> bool

        def updated_at_changed?: () -> bool

        def updated_at_change: () -> [ ActiveSupport::TimeWithZone?, ActiveSupport::TimeWithZone? ]

        def updated_at_will_change!: () -> void

        def updated_at_was: () -> ActiveSupport::TimeWithZone?

        def updated_at_previously_changed?: () -> bool

        def updated_at_previous_change: () -> Array[ActiveSupport::TimeWithZone?]?

        def updated_at_previously_was: () -> ActiveSupport::TimeWithZone?

        def updated_at_before_last_save: () -> ActiveSupport::TimeWithZone?

        def updated_at_change_to_be_saved: () -> Array[ActiveSupport::TimeWithZone?]?

        def updated_at_in_database: () -> ActiveSupport::TimeWithZone?

        def saved_change_to_updated_at: () -> Array[ActiveSupport::TimeWithZone?]?

        def saved_change_to_updated_at?: () -> bool

        def will_save_change_to_updated_at?: () -> bool

        def restore_updated_at!: () -> void

        def clear_updated_at_change: () -> void
      end
      include GeneratedAttributeMethods

      module GeneratedAssociationMethods
      end
      include GeneratedAssociationMethods

      module GeneratedRelationMethods
      end

      class ActiveRecord_Relation < ::ActiveRecord::Relation
        include GeneratedRelationMethods
        include _ActiveRecord_Relation[Lcms::Engine::AccessCode, Integer]
        include Enumerable[Lcms::Engine::AccessCode]
        include Scopes
      end

      class ActiveRecord_Associations_CollectionProxy < ::ActiveRecord::Associations::CollectionProxy
        include GeneratedRelationMethods
        include _ActiveRecord_Relation[Lcms::Engine::AccessCode, Integer]
        include Scopes
      end
    end
  end
end
